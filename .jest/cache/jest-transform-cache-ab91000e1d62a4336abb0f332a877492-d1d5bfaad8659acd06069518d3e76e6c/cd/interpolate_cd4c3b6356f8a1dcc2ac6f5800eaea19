ab7c23b84bac3d4d7c4fc28b961436ad
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = interpolate;exports.Extrapolate = void 0;var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _operators = require("../operators");









var _invariant = _interopRequireDefault(require("fbjs/lib/invariant"));

var _AnimatedNode = _interopRequireDefault(require("../core/AnimatedNode"));
var _AnimatedCond = require("../core/AnimatedCond");
var _AnimatedFunction = require("../core/AnimatedFunction");function _createForOfIteratorHelperLoose(o, allowArrayLike) {var it;if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;return function () {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}it = o[Symbol.iterator]();return it.next.bind(it);}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}

var interpolateInternalSingleProc = (0, _AnimatedFunction.createAnimatedFunction)(function (
value,
inS,
inE,
outS,
outE)
{
  var progress = (0, _operators.divide)((0, _operators.sub)(value, inS), (0, _operators.sub)(inE, inS));

  var resultForNonZeroRange = (0, _operators.add)(outS, (0, _operators.multiply)(progress, (0, _operators.sub)(outE, outS)));
  var result = (0, _AnimatedCond.createAnimatedCond)(
  (0, _operators.eq)(inS, inE),
  (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessOrEq)(value, inS), outS, outE),
  resultForNonZeroRange);

  return result;
});

function interpolateInternalSingle(value, inputRange, outputRange, offset) {
  var inS = inputRange[offset];
  var inE = inputRange[offset + 1];
  var outS = outputRange[offset];
  var outE = outputRange[offset + 1];
  return interpolateInternalSingleProc(value, inS, inE, outS, outE);
}

function interpolateInternal(value, inputRange, outputRange) {var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  if (inputRange.length - offset === 2) {
    return interpolateInternalSingle(value, inputRange, outputRange, offset);
  }
  return (0, _AnimatedCond.createAnimatedCond)(
  (0, _operators.lessThan)(value, inputRange[offset + 1]),
  interpolateInternalSingle(value, inputRange, outputRange, offset),
  interpolateInternal(value, inputRange, outputRange, offset + 1));

}

var Extrapolate = {
  EXTEND: 'extend',
  CLAMP: 'clamp',
  IDENTITY: 'identity' };exports.Extrapolate = Extrapolate;


function checkNonDecreasing(name, arr) {
  for (var i = 1; i < arr.length; ++i) {

    if (arr[i] instanceof _AnimatedNode.default || arr[i - 1] instanceof _AnimatedNode.default)
    continue;
    (0, _invariant.default)(
    arr[i] >= arr[i - 1],
    '%s must be monotonically non-decreasing. (%s)',
    name,
    arr);

  }
}

function checkMinElements(name, arr) {
  (0, _invariant.default)(
  arr.length >= 2,
  '%s must have at least 2 elements. (%s)',
  name,
  arr);

}

function checkValidNumbers(name, arr) {
  for (var i = 0; i < arr.length; i++) {

    if (arr[i] instanceof _AnimatedNode.default || typeof arr[i] !== 'number') continue;
    (0, _invariant.default)(
    Number.isFinite(arr[i]),
    '%s cannot include %s. (%s)',
    name,
    arr[i],
    arr);

  }
}

function convertToRadians(outputRange) {
  for (var _iterator = _createForOfIteratorHelperLoose(outputRange.entries()), _step; !(_step = _iterator()).done;) {var _ref = _step.value;var _ref2 = (0, _slicedToArray2.default)(_ref, 2);var i = _ref2[0];var value = _ref2[1];
    if (typeof value === 'string' && value.endsWith('deg')) {
      outputRange[i] = parseFloat(value) * (Math.PI / 180);
    }
  }
}

function interpolate(value, config) {var

  inputRange =




  config.inputRange,outputRange = config.outputRange,_config$extrapolate = config.extrapolate,extrapolate = _config$extrapolate === void 0 ? Extrapolate.EXTEND : _config$extrapolate,extrapolateLeft = config.extrapolateLeft,extrapolateRight = config.extrapolateRight;

  checkMinElements('inputRange', inputRange);
  checkValidNumbers('inputRange', inputRange);
  checkMinElements('outputRange', outputRange);
  checkValidNumbers('outputRange', outputRange);
  checkNonDecreasing('inputRange', inputRange);
  (0, _invariant.default)(
  inputRange.length === outputRange.length,
  'inputRange and outputRange must be the same length.');


  convertToRadians(outputRange);
  var left = extrapolateLeft || extrapolate;
  var right = extrapolateRight || extrapolate;
  var output = interpolateInternal(value, inputRange, outputRange);

  if (left === Extrapolate.EXTEND) {
  } else if (left === Extrapolate.CLAMP) {
    output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[0]), outputRange[0], output);
  } else if (left === Extrapolate.IDENTITY) {
    output = (0, _AnimatedCond.createAnimatedCond)((0, _operators.lessThan)(value, inputRange[0]), value, output);
  }

  if (right === Extrapolate.EXTEND) {
  } else if (right === Extrapolate.CLAMP) {
    output = (0, _AnimatedCond.createAnimatedCond)(
    (0, _operators.greaterThan)(value, inputRange[inputRange.length - 1]),
    outputRange[outputRange.length - 1],
    output);

  } else if (right === Extrapolate.IDENTITY) {
    output = (0, _AnimatedCond.createAnimatedCond)(
    (0, _operators.greaterThan)(value, inputRange[inputRange.length - 1]),
    value,
    output);

  }

  return output;
}