{"version":3,"sources":["/Users/leronim/Project/translator/utils/animationUtils.tsx"],"names":[],"mappings":"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","sourcesContent":["// Проверка заходит ли pills между двумя на линии\nexport const isBetweenPills = (\n    value: number,\n    firstPosition: number,\n    secondPosition: number\n) => {\n    \"worklet\";\n    return value >= firstPosition && value <= secondPosition;\n}\n\n//Изменение order когда pills уходит с линии\nexport const removePills = (positions: Position[], index: number) => {\n    \"worklet\";\n    const newPositions = positions\n        .filter((_, id: number) => id !== index)\n        .filter((pos: Position) => pos.order.value !== -1)\n        .sort((a: Position, b: Position) => a.order.value > b.order.value ? 1 : -1);\n    newPositions.map((item: Position, id: number) => item.order.value = id)\n}\n\n//Сортировка pills которые находятся на линии\nexport const checkOrder = (position: Position) => {\n    \"worklet\";\n    return position.order.value !== -1;\n}\n\n// Расчет новой позиции (на линии, ушел с линии)\nexport const calculatingInLinePos = (\n    position: Position[], \n    containerWidth: number\n) => {\n    \"worklet\";\n\n    let lineCount: number = 1;\n    let newLine: number = 0;\n\n\n    let newPosition: Position[] = position\n        .filter(checkOrder)\n        .sort((a: Position, b: Position) => a.order.value > b.order.value ? 1 : -1);\n\n    if (newPosition.length === 0) {\n      return;\n    }\n\n    newPosition.forEach((position: Position, index: number) => {\n      const currentWidth: number = newPosition\n        .slice(newLine, index)\n        .reduce((acc: number, item: Position) => acc + item.width.value, 0);\n      if (currentWidth + position.width.value > containerWidth) {\n        lineCount += 1;\n        newLine = index;\n        position.x.value = 0;\n      } else {\n        position.x.value = currentWidth;\n      }\n      if(lineCount < 2) {\n        position.y.value = -120 * lineCount;\n      } else {\n        position.y.value = -60\n      }\n    });\n};\n\nconst movePills = (input: Position[], from: number, to: number) => {\n    \"worklet\";\n    const offsets = input.slice();\n    while (from < 0) {\n        from += offsets.length;\n    }\n    while (to < 0) {\n        to += offsets.length;\n    }\n    if (to >= offsets.length) {\n        let k = to - offsets.length;\n        while (k-- + 1) {\n            offsets.push();\n        }\n    }\n    offsets.splice(to, 0, offsets.splice(from, 1)[0]);\n    return offsets;\n};\n\n//Перестроить положение pills если между двумя из них заходит новый\nconst reBuildPosition = (\n    positions: Position[],\n    current: number, \n    future: number\n) => {\n    \"worklet\";\n    const position = positions\n        .filter(checkOrder)\n        .sort((a: Position, b: Position) => a.order.value > b.order.value ? 1 : -1);\n\n    const newPosition = movePills(position, current, future);\n    newPosition.map((position: Position, index: number) => (position.order.value = index));\n}\n\n//Сортировка pills\nexport const sortPills = (\n    positions: Position[],\n    transition: Transition,\n    index: number,\n    containerWidth: number,\n    currentPosition: Position\n) => {\n    \"worklet\";\n\n    positions.some((item: Position, id: number) => {\n        if(id === index) {\n            return true;\n        } else if(item.order.value === -1) {\n            return false\n        }\n        const xSide = isBetweenPills(transition.x.value, item.x.value, item.x.value + item.width.value);\n        const ySide = isBetweenPills(transition.y.value, item.y.value, item.y.value + 55);\n        if(xSide && ySide) {\n            reBuildPosition(positions, currentPosition.order.value, item.order.value)\n            calculatingInLinePos(positions, containerWidth)\n            return false;\n        }\n    })\n}\n"]}