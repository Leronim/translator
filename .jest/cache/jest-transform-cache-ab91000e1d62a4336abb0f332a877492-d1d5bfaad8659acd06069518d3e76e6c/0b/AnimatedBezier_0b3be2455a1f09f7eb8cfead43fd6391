d35371b6132f5e84861554e3732550df
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _val = require("../val");
var _AnimatedNode2 = _interopRequireDefault(require("./AnimatedNode"));
var _invariant = _interopRequireDefault(require("fbjs/lib/invariant"));function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = (0, _getPrototypeOf2.default)(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return (0, _possibleConstructorReturn2.default)(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}


var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;

var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

var float32ArraySupported = typeof Float32Array === 'function';

function A(aA1, aA2) {
  return 1.0 - 3.0 * aA2 + 3.0 * aA1;
}
function B(aA1, aA2) {
  return 3.0 * aA2 - 6.0 * aA1;
}
function C(aA1) {
  return 3.0 * aA1;
}


function calcBezier(aT, aA1, aA2) {
  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}


function getSlope(aT, aA1, aA2) {
  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
}

function binarySubdivide(aX, aA, aB, mX1, mX2) {
  var currentX = 0;
  var currentT = 0;
  var i = 0;
  do {
    currentT = aA + (aB - aA) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0.0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (
  Math.abs(currentX) > SUBDIVISION_PRECISION &&
  ++i < SUBDIVISION_MAX_ITERATIONS);

  return currentT;
}

function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
    var currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0.0) {
      return aGuessT;
    }
    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}

function bezier(mX1, mY1, mX2, mY2) {

  var sampleValues = float32ArraySupported ?
  new Float32Array(kSplineTableSize) :
  new Array(kSplineTableSize);
  if (mX1 !== mY1 || mX2 !== mY2) {
    for (var i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
  }

  function getTForX(aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;

    for (;

    currentSample !== lastSample && sampleValues[currentSample] <= aX;
    ++currentSample)
    {
      intervalStart += kSampleStepSize;
    }
    --currentSample;


    var dist =
    (aX - sampleValues[currentSample]) / (
    sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;

    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(
      aX,
      intervalStart,
      intervalStart + kSampleStepSize,
      mX1,
      mX2);

    }
  }

  return function BezierEasing(x) {
    if (mX1 === mY1 && mX2 === mY2) {
      return x;
    }

    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
}var

AnimatedBezier = function (_AnimatedNode) {(0, _inherits2.default)(AnimatedBezier, _AnimatedNode);var _super = _createSuper(AnimatedBezier);



  function AnimatedBezier(value, mX1, mY1, mX2, mY2) {var _this;(0, _classCallCheck2.default)(this, AnimatedBezier);
    (0, _invariant.default)(
    value instanceof _AnimatedNode2.default, "Reanimated: Bezier node argument should be of type AnimatedNode but got " +
    value);

    _this = _super.call(this, { type: 'bezier', mX1: mX1, mY1: mY1, mX2: mX2, mY2: mY2, input: value }, [value]);
    _this._value = value;
    _this._bezier = bezier(mX1, mY1, mX2, mY2);return _this;
  }(0, _createClass2.default)(AnimatedBezier, [{ key: "toString", value: function toString()

    {
      return "AnimatedBezier, id: " + this.__nodeID;
    } }, { key: "__onEvaluate", value: function __onEvaluate()

    {
      return this._bezier((0, _val.val)(this._value));
    } }]);return AnimatedBezier;}(_AnimatedNode2.default);exports.default = AnimatedBezier;