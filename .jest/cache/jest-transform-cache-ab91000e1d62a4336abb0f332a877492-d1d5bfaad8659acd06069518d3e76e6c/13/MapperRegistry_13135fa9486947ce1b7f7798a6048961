8115b60f9fdd4e30b7181bfe54fe0fcb
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var MapperRegistry = function () {





  function MapperRegistry(module) {(0, _classCallCheck2.default)(this, MapperRegistry);this.sortedMappers = [];this.mappers = new Map();this.updatedSinceLastExecute = false;
    this._module = module;
  }(0, _createClass2.default)(MapperRegistry, [{ key: "startMapper", value: function startMapper(

    mapper) {
      this.mappers.set(mapper.id, mapper);
      this.updatedSinceLastExecute = true;
      return mapper.id;
    } }, { key: "stopMapper", value: function stopMapper(

    id) {
      this.mappers.delete(id);
      this.updatedSinceLastExecute = true;
    } }, { key: "execute", value: function execute()

    {
      if (this.updatedSinceLastExecute) {
        this.updateOrder();
        this.updatedSinceLastExecute = false;
      }

      for (var i = 0, len = this.sortedMappers.length; i < len; ++i) {
        var mapper = this.sortedMappers[i];
        if (mapper.dirty) {
          mapper.execute();
        }
      }
    } }, { key: "updateOrder", value: function updateOrder()

    {
      var nodes = (0, _toConsumableArray2.default)(this.mappers.values()).map(function (mapper) {return new Node(mapper);});

      var mappersById = {};
      this.mappers.forEach(function (mapper) {
        mappersById[mapper.id] = mapper;
      });


      for (var i = 0, nodesLen = nodes.length; i < nodesLen; ++i) {
        var node = nodes[i];
        if (node.mapper.outputs.length === 0) {
          continue;
        }
        for (var j = 0; j < nodesLen; ++j) {
          var restNode = nodes[j];
          if (i === j || restNode.mapper.inputs.length === 0) {
            continue;
          }
          for (
          var outi = 0, outputsLen = node.mapper.outputs.length;
          outi < outputsLen;
          ++outi)
          {
            for (
            var resti = 0, restLen = restNode.mapper.inputs.length;
            resti < restLen;
            ++resti)
            {
              if (
              node.mapper.outputs[outi]._id ===
              restNode.mapper.inputs[resti]._id)
              {
                node.children.push(restNode);
              }
            }
          }
        }
      }

      var post = {};
      var postCounter = 1;
      var dfs = function dfs(node) {
        var index = nodes.indexOf(node);
        if (index === -1) {

          return;
        }
        ++postCounter;
        nodes.splice(index, 1);
        if (node.children.length === 0 && nodes.length > 0) {
          post[node.mapper.id] = postCounter++;
          dfs(nodes[0]);
          return;
        }
        for (var _i = 0, len = node.children.length; _i < len; ++_i) {
          dfs(node.children[_i]);
        }
        post[node.mapper.id] = postCounter++;
      };

      while (nodes.length) {dfs(nodes[0]);}

      var postArray = Object.keys(post).map(function (key) {
        return [key, post[key]];
      });
      postArray.sort(function (a, b) {
        return b[1] - a[1];
      });


      this.sortedMappers = [];

      for (var _i2 = 0, len = postArray.length; _i2 < len; ++_i2) {var _postArray$_i = (0, _slicedToArray2.default)(
        postArray[_i2], 1),id = _postArray$_i[0];
        this.sortedMappers.push(mappersById[id]);
      }
    } }, { key: "needRunOnRender", get: function get()

    {
      return this.updatedSinceLastExecute;
    } }]);return MapperRegistry;}();exports.default = MapperRegistry;var


Node =



function Node(mapper) {var parents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];(0, _classCallCheck2.default)(this, Node);this.mapper = null;this.children = [];
  this.mapper = mapper;
  this.children = children;
};