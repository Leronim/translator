5310cb88efc49f88bfd8e327ce397460
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.getAnimatedStyle = exports.setUpTests = exports.advanceAnimationByFrame = exports.advanceAnimationByTime = exports.withReanimatedTimer = void 0;var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}



var config = {
  fps: 60 };


var checkValidation = function checkValidation(received) {var _received$props$anima;
  var message = [];
  var isValid = true;
  if (!received.props.style) {
    isValid = false;
    message.push("Component not contains 'style' property");
  }
  if (!((_received$props$anima = received.props.animatedStyle) != null && _received$props$anima.value)) {
    isValid = false;
    message.push("Component not contains 'animatedStyle' property");
  }
  message = message.join('\n');

  return { isValid: isValid, message: message };
};

var getCurrentStyle = function getCurrentStyle(received) {
  return _objectSpread(_objectSpread({},
  received.props.style),
  received.props.animatedStyle.value);

};

var findStyleDiff = function findStyleDiff(current, expect, requireAllMatch) {
  var diffs = [];
  var isEqual = true;
  for (var property in expect) {
    if (current[property] !== expect[property]) {
      isEqual = false;
      diffs.push({
        property: property,
        current: current[property],
        expect: expect[property] });

    }
  }
  if (
  requireAllMatch &&
  Object.keys(current).length !== Object.keys(expect).length)
  {
    isEqual = false;
    for (var _property in current) {
      if (expect[_property] === undefined) {
        diffs.push({
          property: _property,
          current: current[_property],
          expect: expect[_property] });

      }
    }
  }

  return { isEqual: isEqual, diffs: diffs };
};

var compareStyle = function compareStyle(received, expectedStyle, config) {var _checkValidation =
  checkValidation(received),isValid = _checkValidation.isValid,_message = _checkValidation.message;
  if (!isValid) {
    return { message: function message() {return _message;}, pass: false };
  }var
  exact = config.exact;
  var currentStyle = getCurrentStyle(received);var _findStyleDiff =
  findStyleDiff(currentStyle, expectedStyle, exact),isEqual = _findStyleDiff.isEqual,diffs = _findStyleDiff.diffs;

  if (isEqual) {
    return { message: function message() {return 'ok';}, pass: true };
  }

  var currentStyleStr = JSON.stringify(currentStyle);
  var expectedStyleStr = JSON.stringify(expectedStyle);
  var differences = diffs.
  map(
  function (diff) {return "- '" +
    diff.property + "' should be " + diff.expect + ", but is " + diff.current;}).

  join('\n');

  return {
    message: function message() {return "Expected: " +
      expectedStyleStr + "\nReceived: " + currentStyleStr + "\n\nDifferences:\n" + differences;},
    pass: false };

};

var frameTime = 1000 / config.fps;
var requestAnimationFrameCopy;

var requestAnimationFrame = function requestAnimationFrame(callback) {
  setTimeout(callback, frameTime);
};

var beforeTest = function beforeTest() {
  requestAnimationFrameCopy = global.requestAnimationFrame;
  global.requestAnimationFrame = requestAnimationFrame;
  require('mockdate').set(0);
  jest.useFakeTimers();
};

var afterTest = function afterTest() {
  require('mockdate').reset();
  jest.useRealTimers();
  global.requestAnimationFrame = requestAnimationFrameCopy;
};

var tickTravel = function tickTravel() {
  require('mockdate').set(new Date(Date.now() + frameTime));
  jest.advanceTimersByTime(frameTime);
};

var withReanimatedTimer = function withReanimatedTimer(animatonTest) {
  beforeTest();
  animatonTest();
  afterTest();
};exports.withReanimatedTimer = withReanimatedTimer;

var advanceAnimationByTime = function advanceAnimationByTime() {var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : frameTime;
  for (var i = 0; i < Math.ceil(time / frameTime); i++) {
    tickTravel();
  }
};exports.advanceAnimationByTime = advanceAnimationByTime;

var advanceAnimationByFrame = function advanceAnimationByFrame(count) {
  for (var i = 0; i < count; i++) {
    tickTravel();
  }
};exports.advanceAnimationByFrame = advanceAnimationByFrame;

var setUpTests = function setUpTests() {var userConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var expect = require('expect');
  frameTime = 1000 / config.fps;

  config = _objectSpread(_objectSpread({},
  config),
  userConfig);


  expect.extend({
    toHaveAnimatedStyle: function toHaveAnimatedStyle(received, expectedStyle) {var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return compareStyle(received, expectedStyle, config);
    } });


  jest.mock('./js-reanimated', function () {return require('./js-reanimated/index.web');});
  jest.mock('../ReanimatedModule', function () {return require('../ReanimatedModuleCompat');});
  jest.mock('./NativeReanimated', function () {
    var module;
    try {
      module = require('./NativeReanimated.js');
    } catch (_unused) {
      module = require('./NativeReanimated.ts');
    }
    return module.default;
  });
};exports.setUpTests = setUpTests;

var getAnimatedStyle = function getAnimatedStyle(received) {
  return getCurrentStyle(received);
};exports.getAnimatedStyle = getAnimatedStyle;