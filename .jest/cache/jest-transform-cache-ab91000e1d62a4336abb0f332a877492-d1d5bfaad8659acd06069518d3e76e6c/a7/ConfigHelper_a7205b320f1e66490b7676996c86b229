6f5c55aa221fdeab2e4483a6c2dc4b2c
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.addWhitelistedNativeProps = addWhitelistedNativeProps;exports.addWhitelistedUIProps = addWhitelistedUIProps;exports.adaptViewConfig = adaptViewConfig;var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _ReanimatedModule = _interopRequireDefault(require("./ReanimatedModule"));function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}




var UI_THREAD_PROPS_WHITELIST = {
  opacity: true,
  transform: true,

  backgroundColor: true,
  borderRightColor: true,
  borderBottomColor: true,
  borderColor: true,
  borderEndColor: true,
  borderLeftColor: true,
  borderStartColor: true,
  borderTopColor: true,

  shadowOpacity: true,
  shadowRadius: true,

  scaleX: true,
  scaleY: true,
  translateX: true,
  translateY: true };





var NATIVE_THREAD_PROPS_WHITELIST = {
  borderBottomWidth: true,
  borderEndWidth: true,
  borderLeftWidth: true,
  borderRightWidth: true,
  borderStartWidth: true,
  borderTopWidth: true,
  borderWidth: true,
  bottom: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  height: true,
  left: true,
  margin: true,
  marginBottom: true,
  marginEnd: true,
  marginHorizontal: true,
  marginLeft: true,
  marginRight: true,
  marginStart: true,
  marginTop: true,
  marginVertical: true,
  maxHeight: true,
  maxWidth: true,
  minHeight: true,
  minWidth: true,
  padding: true,
  paddingBottom: true,
  paddingEnd: true,
  paddingHorizontal: true,
  paddingLeft: true,
  paddingRight: true,
  paddingStart: true,
  paddingTop: true,
  paddingVertical: true,
  right: true,
  start: true,
  top: true,
  width: true,
  zIndex: true,
  borderBottomEndRadius: true,
  borderBottomLeftRadius: true,
  borderBottomRightRadius: true,
  borderBottomStartRadius: true,
  borderRadius: true,
  borderTopEndRadius: true,
  borderTopLeftRadius: true,
  borderTopRightRadius: true,
  borderTopStartRadius: true,
  opacity: true,
  elevation: true,
  fontSize: true,
  lineHeight: true,
  textShadowRadius: true,
  letterSpacing: true,

  display: true,
  backfaceVisibility: true,
  overflow: true,
  resizeMode: true,
  fontStyle: true,
  fontWeight: true,
  textAlign: true,
  textDecorationLine: true,
  fontFamily: true,
  textAlignVertical: true,
  fontVariant: true,
  textDecorationStyle: true,
  textTransform: true,
  writingDirection: true,

  color: true,
  tintColor: true,
  shadowColor: true };


function configureProps() {
  _ReanimatedModule.default.configureProps(
  Object.keys(NATIVE_THREAD_PROPS_WHITELIST),
  Object.keys(UI_THREAD_PROPS_WHITELIST));

}

function addWhitelistedNativeProps(props) {
  var oldSize = Object.keys(NATIVE_THREAD_PROPS_WHITELIST).length;
  NATIVE_THREAD_PROPS_WHITELIST = _objectSpread(_objectSpread({},
  NATIVE_THREAD_PROPS_WHITELIST),
  props);

  if (oldSize !== Object.keys(NATIVE_THREAD_PROPS_WHITELIST).length) {
    configureProps();
  }
}

function addWhitelistedUIProps(props) {
  var oldSize = Object.keys(UI_THREAD_PROPS_WHITELIST).length;
  UI_THREAD_PROPS_WHITELIST = _objectSpread(_objectSpread({}, UI_THREAD_PROPS_WHITELIST), props);
  if (oldSize !== Object.keys(UI_THREAD_PROPS_WHITELIST).length) {
    configureProps();
  }
}

var PROCESSED_VIEW_NAMES = new Set();




function adaptViewConfig(viewConfig) {
  var viewName = viewConfig.uiViewClassName;
  var props = viewConfig.validAttributes;


  if (!PROCESSED_VIEW_NAMES.has(viewName)) {
    var propsToAdd = {};
    Object.keys(props).forEach(function (key) {


      if (
      !(key in NATIVE_THREAD_PROPS_WHITELIST) &&
      !(key in UI_THREAD_PROPS_WHITELIST))
      {
        propsToAdd[key] = true;
      }
    });
    addWhitelistedUIProps(propsToAdd);

    PROCESSED_VIEW_NAMES.add(viewName);
  }
}

configureProps();